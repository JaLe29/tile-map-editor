{"version":3,"sources":["components/tile/tile.js","app.js","serviceWorker.js","index.js"],"names":["Tile","handleMouseEnter","props","onMouseEnter","indexX","indexY","handleMouseClick","onMouseClick","this","value","image","style","backgroundImage","undefined","className","onClick","React","PureComponent","defaultState","board","tiles","xSize","ySize","activeTile","App","isMouseDown","componentDidMount","generateNewBoard","handleXChange","event","Number","isInteger","parseInt","target","setState","handleYChange","handleBoardMouseDown","handleBoardMouseUp","handleTileMouseEnter","x","y","updateTile","handleTileMouseClick","handleAddRowTile","state","newTiles","produce","draftState","push","newBoard","setActiveTile","index","handleTileRowValueChange","handleTileRowImageChange","handleRemoveTileRow","splice","i","subBoard","j","renderTileButtons","map","tile","src","classnames","alt","renderOptions","Input","placeholder","label","labelPosition","onChange","renderTileSettingsModal","Modal","trigger","Button","Header","Content","Description","Divider","e","icon","Icon","name","renderBoard","onMouseDown","onMouseUp","row","key","col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4be36375.chunk.js","sourcesContent":["import React from 'react'\nimport './tile.scss'\n\n\ntype Props = {\n\tvalue: number,\n\tindexX: number,\n\tindexY: number,\n\timage: ?string,\n\tonMouseEnter: Function,\n\tonMouseClick: Function,\n}\n\nexport default class Tile extends React.PureComponent<Props> {\n\n\thandleMouseEnter = () => {\n\t\tconst {onMouseEnter, indexX, indexY} = this.props\n\n\t\tonMouseEnter(indexX, indexY)\n\t}\n\n\thandleMouseClick = () => {\n\t\tconst {onMouseClick, indexX, indexY} = this.props\n\n\t\tonMouseClick(indexX, indexY)\n\t}\n\n\trender () {\n\t\tconst {value, image} = this.props\n\n\t\tconst style = {backgroundImage: `url(${image})`}\n\n\t\treturn (\n\t\t\t<div style={image ? style : undefined} className='tile' onMouseEnter={this.handleMouseEnter} onClick={this.handleMouseClick}>\n\t\t\t\t{value}\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React from 'react'\nimport classnames from 'classnames'\nimport {Input, Button, Icon, Modal} from 'semantic-ui-react'\nimport {Divider} from 'semantic-ui-react'\nimport produce from 'immer'\nimport Tile from './components/tile'\nimport './app.scss'\n\nconst demoTiles = [\n\t{value: 1, image: 'https://st2.depositphotos.com/3768069/5463/i/950/depositphotos_54630705-stock-photo-grass-seamless-texture-tile.jpg'},\n]\n\ntype Props = {}\n\ntype State = {\n\tboard: Array<Array<number>>,\n\txSize: number,\n\tySize: number,\n\tactiveTile: number,\n}\n\nconst defaultState = {\n\tboard: [],\n\ttiles: demoTiles,\n\txSize: 10,\n\tySize: 10,\n\tactiveTile: 0,\n}\n\nexport default class App extends React.PureComponent<Props, State> {\n\n\tisMouseDown = false\n\n\tconstructor (props: Props) {\n\t\tsuper(props)\n\n\t\tthis.state = defaultState\n\t}\n\n\tcomponentDidMount = () => {\n\t\tthis.generateNewBoard()\n\t}\n\n\thandleXChange = (event) => {\n\t\tif (!Number.isInteger(parseInt(event.target.value, 10))) return\n\t\tthis.setState({xSize: parseInt(event.target.value, 10)}, this.generateNewBoard)\n\t}\n\n\thandleYChange = (event) => {\n\t\tif (!Number.isInteger(parseInt(event.target.value, 10))) return\n\t\tthis.setState({ySize: parseInt(event.target.value, 10)}, this.generateNewBoard)\n\t}\n\n\thandleBoardMouseDown = () => this.isMouseDown = true\n\n\thandleBoardMouseUp = () => this.isMouseDown = false\n\n\thandleTileMouseEnter = (x, y) => this.isMouseDown && this.updateTile(x, y)\n\n\thandleTileMouseClick = (x, y) => this.updateTile(x, y)\n\n\thandleAddRowTile = () => {\n\t\tconst {tiles} = this.state\n\t\tconst newTiles = produce(tiles, draftState => {\n\t\t\tdraftState.push({value: -1, image: ''})\n\t\t})\n\t\tthis.setState({tiles: newTiles})\n\t}\n\n\tupdateTile = (x, y) => {\n\t\tconst {board, activeTile} = this.state\n\t\tif (board[x][y] === activeTile) return\n\n\t\tconst newBoard = produce(board, draftState => {\n\t\t\tdraftState[x][y] = activeTile\n\t\t})\n\n\t\tthis.setState({board: newBoard})\n\t}\n\n\tsetActiveTile = (index) => this.setState({activeTile: index})\n\n\thandleTileRowValueChange = (index, value) => {\n\t\tconst {tiles} = this.state\n\t\tconst newTiles = produce(tiles, draftState => {\n\t\t\tdraftState[index] = {...draftState[index], value: value}\n\t\t})\n\t\tthis.setState({tiles: newTiles})\n\t}\n\n\thandleTileRowImageChange = (index, value) => {\n\t\tconst {tiles} = this.state\n\t\tconst newTiles = produce(tiles, draftState => {\n\t\t\tdraftState[index] = {...draftState[index], image: value}\n\t\t})\n\t\tthis.setState({tiles: newTiles})\n\t}\n\n\thandleRemoveTileRow = (index) => {\n\t\tconst {tiles} = this.state\n\t\tconst newTiles = produce(tiles, draftState => {\n\t\t\tif (index > -1) {\n\t\t\t\tdraftState.splice(index, 1);\n\t\t\t}\n\t\t})\n\t\tthis.setState({tiles: newTiles})\n\t}\n\n\tgenerateNewBoard = () => {\n\t\tconst {xSize, ySize} = this.state\n\t\tconst board = []\n\n\t\tfor (let i = 0; i < ySize; i++) {\n\t\t\tconst subBoard = []\n\t\t\tfor (let j = 0; j < xSize; j++) {\n\t\t\t\tsubBoard.push(-1)\n\t\t\t}\n\n\t\t\tboard.push(subBoard)\n\t\t}\n\n\t\tthis.setState({board})\n\t}\n\n\trenderTileButtons = () => {\n\t\tconst {tiles, activeTile} = this.state\n\n\t\treturn (\n\t\t\t<div className='tileButtons'>\n\t\t\t\t{\n\t\t\t\t\ttiles.map((tile, i) => (\n\t\t\t\t\t\t<div onClick={() => this.setActiveTile(i)} className={'tileButton'}>\n\t\t\t\t\t\t\t<span className='tileTitle'>{tile.value}</span>\n\t\t\t\t\t\t\t<img src={tile.image} className={classnames('tileButton', {'activeTileButton': i === activeTile})} alt='' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n\n\trenderOptions = () => {\n\t\tconst {xSize, ySize} = this.state\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder='X position'\n\t\t\t\t\tlabel={'X'}\n\t\t\t\t\tlabelPosition='left corner'\n\t\t\t\t\tvalue={xSize}\n\t\t\t\t\tonChange={this.handleXChange}\n\t\t\t\t/>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder='Y position'\n\t\t\t\t\tlabel={'Y'}\n\t\t\t\t\tlabelPosition='left corner'\n\t\t\t\t\tvalue={ySize}\n\t\t\t\t\tonChange={this.handleYChange}\n\t\t\t\t/>\n\t\t\t\t{this.renderTileSettingsModal()}\n\t\t\t\t{this.renderTileButtons()}\n\t\t\t</div>\n\t\t)\n\t}\n\n\trenderTileSettingsModal = () => {\n\t\tconst {tiles} = this.state\n\n\t\treturn (\n\t\t\t<Modal trigger={<Button>Show tille settings</Button>}>\n\t\t\t\t<Modal.Header>Tile settings</Modal.Header>\n\t\t\t\t<Modal.Content>\n\t\t\t\t\t<Modal.Description>\n\t\t\t\t\t\t<Button onClick={this.handleAddRowTile}>\n\t\t\t\t\t\t\tAdd new tile\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Divider />\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttiles.map((tile, i) => (\n\t\t\t\t\t\t\t\t<div className='tileRow'>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\tvalue={tile.value}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.handleTileRowValueChange(i, e.target.value)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\tvalue={tile.image}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.handleTileRowImageChange(i, e.target.value)}\n\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<img src={tile.image} className='tileImage' alt='' />\n\t\t\t\t\t\t\t\t\t<Button icon onClick={() => this.handleRemoveTileRow(i)}>\n\t\t\t\t\t\t\t\t\t\t<Icon name='trash' />\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t</Modal.Description>\n\t\t\t\t</Modal.Content>\n\t\t\t</Modal>\n\t\t)\n\t}\n\n\trenderBoard = () => {\n\t\tconst {board, activeTile, tiles} = this.state\n\n\t\treturn (\n\t\t\t<div className='board' onMouseDown={this.handleBoardMouseDown} onMouseUp={this.handleBoardMouseUp}>\n\t\t\t\t{board.map((row, i) => (\n\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t{row.map((col, j) => (\n\t\t\t\t\t\t\t<Tile\n\t\t\t\t\t\t\t\tkey={`${i}${j}`}\n\t\t\t\t\t\t\t\tindexX={i}\n\t\t\t\t\t\t\t\tindexY={j}\n\t\t\t\t\t\t\t\tonMouseEnter={this.handleTileMouseEnter}\n\t\t\t\t\t\t\t\tonMouseClick={this.handleTileMouseClick}\n\t\t\t\t\t\t\t\tvalue={board[i][j]}\n\t\t\t\t\t\t\t\timage={tiles[board[i][j]] ? tiles[board[i][j]].image : null}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.renderOptions()}\n\t\t\t\t<Divider />\n\t\t\t\t{this.renderBoard()}\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}